class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  private boolean hitPaddle() {
    BouncePoint bp = calculateBouncePointPaddle();
	   setBounce(bp);
	   return (bp!=null);
  }


  private boolean isOutOfBoundsAndLastLife() {
    // TODO implement
    return false;
  }
  
  private boolean isOutOfBounds() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlockAndLastLevel() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlock(){
    // TODO implement
    return false;
  }
  
  private boolean hitBlock() {
    // TODO implement
    return false;
  }
  
  private boolean hitWall() {
    // TODO implement
    return false;
  }
  
  // Actions
  
  private void doSetup() {
    // TODO implement
  }
  
  private void doHitPaddleOrWall() {
    // TODO implement
  }

  private void doOutOfBounds() {
    // TODO implement
  }

  private void doHitBlock() {
    // TODO implement
  }

  private void doHitBlockNextLevel() {
    // TODO implement
  }

  private void doHitNothingAndNotOutOfBounds() {
    double x = getCurrentBallX();
    double y = getCurrentBallY();
    double dx = getBallDirectionX();
    double dy = getBallDirectionY();
    
    setCurrentBallX(x+dx);
    setCurrentBallY(y+dy);
    
  }

  private void doGameOver() {
    // TODO implement
  }
  
  //!!!George!!!
  private BouncePoint calculateBouncePointPaddle() {
   	int radius = Ball.BALL_DIAMETER/2;
   	
   	//ball coords
   	double xCurrent = this.getCurrentBallX();
	double yCurrent = this.getCurrentBallY();
	double xNext = xCurrent + this.getBallDirectionX();
	double yNext = yCurrent + this.getBallDirectionY();
	
	//paddle rectangles
	Rectangle2D.Double rectA = new Rectangle2D.Double(this.getCurrentPaddleX(), this.getCurrentPaddleY() - radius, this.getCurrentPaddleLength(), radius);
	Rectangle2D.Double rectB = new Rectangle2D.Double(this.getCurrentPaddleX() - radius, this.getCurrentPaddleY(), radius, 5.);
	Rectangle2D.Double rectC = new Rectangle2D.Double(this.getCurrentPaddleX() + this.getCurrentPaddleLength(), this.getCurrentPaddleY(), radius, 5);
	Rectangle2D.Double rectE = new Rectangle2D.Double(this.getCurrentPaddleX() - radius, this.getCurrentPaddleY() - radius, radius, radius);
	Rectangle2D.Double rectF = new Rectangle2D.Double(this.getCurrentPaddleX() + this.getCurrentPaddleLength(), this.getCurrentPaddleY() - radius, radius, radius);
	
	//intersections
	boolean interA = rectA.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	boolean interB = rectB.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	boolean interC = rectC.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	boolean interE = rectE.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	boolean interF = rectF.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	
	//the ball does not intersect anything
	if (!interA && !interB && !interC && !interE && !interF) {
		return null;
		}
	
	//intersectionA
	if (interA) {
		return new BouncePoint(xCurrent,xNext, BounceDirection.FLIP_Y);
	   }
	   
	 //intersectionB
	 if (interB) {
		boolean onB = rectB.contains(xNext, yNext);
			if (onB) {
				return = new BouncePoint(xCurrent,xNext, BounceDirection.FLIP_X);
		   }
	   }
	  
	 //intersectionC
	 if (interC) {
		boolean onC = rectC.contains(xNext, yNext);
			if (onC) {
				return = new BouncePoint(xCurrent,xNext, BounceDirection.FLIP_X);
		   }
	   }
	   
	  //intersectionE
	  if (interC) {
		boolean onC = rectC.contains(xNext, yNext);
			if (onC) {
				return = new BouncePoint(xCurrent,xNext, BounceDirection.FLIP_X);
		   }
	   }   
	
}
