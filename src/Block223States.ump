class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  private boolean hitPaddle() {
<<<<<<< HEAD
    BouncePoint bp = calculateBouncePointPaddle();
	   setBounce(bp);
	   return (bp!=null);
=======
    // George
    BouncePoint bp = calculateBouncePointPaddle();
    
    setBounce(bp);
    
    if(bp != null){
    	return true;
    }
    return false;
>>>>>>> 46d9820c466edcd778b2f63e2fe76d39e60510a3
  }


  private boolean isOutOfBoundsAndLastLife() {
    // TODO implement
    return false;
  }
  
  private boolean isOutOfBounds() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlockAndLastLevel() {
	// Yannick
	game = getGame();

	int nrLevels = game.numberOfLevels();
	
	setBounce(null);

	if(nrLevels == currentLevel){
		int nrBlocks = numberOfBlocks();

		if(nrBlocks == 1){
			PlayedBlockAssignment block = getBlock(0);
			BouncePoint bp = calculateBouncePointBlock(block);
			if(bp == null){
				return false;
			}
			setBounce(bp);
			return true;
		}
	}
    return false;
  }
  
	private boolean hitLastBlock(){
    // Yannick
    	int nrBlocks = numberOfBlocks();
    
    	setBounce(null);
    
    	if(nrBlocks == 1){
    
    		PlayedBlockAssignment block = getBlock(0);
    
    		BouncePoint bp = calculateBouncePointBlock(block);
    
    		if(bp == null){
    			return false;
    		}
    	
    		setBounce(bp);
			return true;
		}
    
		return false;
	}
  
  private boolean hitBlock() {
    // Yannick
    
    int nrBlocks = numberOfBlocks();
    
    setBounce(null);
    
    for(int i = 0 ; i < numberOfBlocks() - 1 ; i++){
    
    	 PlayedBlockAssignment block = getBlock(i);
    	 
    	 BouncePoint bp = calculateBouncePointBlock(block);
    	 
    	 bounce = getBounce();
    	 
    	 if(bp != null && bounce != null){
    	 	Boolean closer = isCloser(bp, bounce);
    	 
    	 	if(closer){
    	 	
    	 		setBounce(bp);
    	 	
    		}
    		return true;
    	}
    }
    return false;
  }
  
  private boolean hitWall() {
    // George
    BouncePoint bp = calculateBouncePointWall();
    
    setBounce(bp);
    
    if(bp != null){
    	return true;
    }
    return false;
  }
  
  // Actions
  
  private void doSetup() {
    // TODO implement
  }
  
  private void doHitPaddleOrWall() {
    // George
    bounceBall();
  }

  private void doOutOfBounds() {
    // TODO implement
  }

  private void doHitBlock() {
    // Yannick
    int score = getScore();
    bounce = getBounce();
    
    PlayedBlockAssignment pblock = bounce.getHitBlock();
    
    Block block = pblock.getBlock();
    
    int points = block.getPoints();
    
    setScore(score + points);
    
    pblock.delete();
    
    bounceBall();
    
  }

  private void doHitBlockNextLevel() {
    // Yannick
    doHitBlock();
    
    int level = getCurrentLevel();
    
    setCurrentLevel(level + 1);
    
    setCurrentPaddleLength(getGame().getPaddle().getMaxPaddleLength() -
    	(getGame().getPaddle().getMaxPaddleLength() - getGame().getPaddle().getMinPaddleLength()) / 
    	(getGame().numberOfLevels() - 1) * (getCurrentLevel() - 1));
    	
    setWaitTime(INITIAL_WAIT_TIME * Math.pow(getGame().getBall().getBallSpeedIncreaseFactor(), (getCurrentLevel() - 1)));
    
  }

  private void doHitNothingAndNotOutOfBounds() {
    double x = getCurrentBallX();
    double y = getCurrentBallY();
    double dx = getBallDirectionX();
    double dy = getBallDirectionY();
    
    setCurrentBallX(x+dx);
    setCurrentBallY(y+dy);
    
  }

  private void doGameOver() {
    // TODO implement
  }
  
  //!!!George!!!
  private BouncePoint calculateBouncePointPaddle() {
   	int radius = Ball.BALL_DIAMETER/2;
   	
   	//ball coords
   	double xCurrent = this.getCurrentBallX();
	double yCurrent = this.getCurrentBallY();
	double xNext = xCurrent + this.getBallDirectionX();
	double yNext = yCurrent + this.getBallDirectionY();
	
	//paddle rectangles
	Rectangle2D.Double rectA = new Rectangle2D.Double(this.getCurrentPaddleX(), this.getCurrentPaddleY() - radius, this.getCurrentPaddleLength(), radius);
	Rectangle2D.Double rectB = new Rectangle2D.Double(this.getCurrentPaddleX() - radius, this.getCurrentPaddleY(), radius, 5.);
	Rectangle2D.Double rectC = new Rectangle2D.Double(this.getCurrentPaddleX() + this.getCurrentPaddleLength(), this.getCurrentPaddleY(), radius, 5);
	Rectangle2D.Double rectE = new Rectangle2D.Double(this.getCurrentPaddleX() - radius, this.getCurrentPaddleY() - radius, radius, radius);
	Rectangle2D.Double rectF = new Rectangle2D.Double(this.getCurrentPaddleX() + this.getCurrentPaddleLength(), this.getCurrentPaddleY() - radius, radius, radius);
	
	//intersections
	boolean interA = rectA.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	boolean interB = rectB.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	boolean interC = rectC.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	boolean interE = rectE.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	boolean interF = rectF.intersectsLine(xCurrent, yCurrent, xNext, yNext);
	
	//the ball does not intersect anything
	if (!interA && !interB && !interC && !interE && !interF) {
		return null;
		}
	
	//intersectionA
	if (interA) {
		return new BouncePoint(xCurrent,xNext, BounceDirection.FLIP_Y);
	   }
	   
	 //intersectionB
	 if (interB) {
		boolean onB = rectB.contains(xNext, yNext);
			if (onB) {
				return = new BouncePoint(xCurrent,xNext, BounceDirection.FLIP_X);
		   }
	   }
	  
	 //intersectionC
	 if (interC) {
		boolean onC = rectC.contains(xNext, yNext);
			if (onC) {
				return = new BouncePoint(xCurrent,xNext, BounceDirection.FLIP_X);
		   }
	   }
	   
	  //intersectionE
	  if (interC) {
		boolean onC = rectC.contains(xNext, yNext);
			if (onC) {
				return = new BouncePoint(xCurrent,xNext, BounceDirection.FLIP_X);
		   }
	   }   
	
}
